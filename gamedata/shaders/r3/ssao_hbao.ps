#ifndef SSAO_QUALITY
float4 calc_hbao(float z,float3 N,float2 tc0,float4 pos2d){
return 1.0;
}
#else
uniform float4 screen_res;
#define g_Resolution screen_res.xy
#define g_InvResolution screen_res.zw
#if SSAO_QUALITY==3
static const float g_NumDir=6.0f;
static const float g_NumSteps=3.0f;
#elif SSAO_QUALITY==2
static const float g_NumDir=5.0f;
static const float g_NumSteps=3.0f;
#elif SSAO_QUALITY==1
static const float g_NumDir=4.0f;
static const float g_NumSteps=3.0f;
#endif
static const float g_Contrast=0.8f;
static const float g_AngleBias=0.0f;
static const float g_R=0.400009334f;
static const float g_sqr_R=0.160007462f;
static const float g_inv_R=2.49994159f;
uniform texture2D jitter4;
#define M_PI 3.1415926f
struct PostProc_VSOut {
float4 pos:SV_Position;
float2 texUV:TEXCOORD0;
};
float tangent(float3 P,float3 S){
return (P.z-S.z)/length(S.xy-P.xy);
}
float tangent(float3 T){
return-T.z/length(T.xy);
}
float length2(float3 v){ return dot(v,v);} 
float3 min_diff(float3 P,float3 Pr,float3 Pl){
float3 V1=Pr-P;
float3 V2=P-Pl;
return (length2(V1)<length2(V2))? V1:V2;
}
float3 fetch_eye_pos(float2 uv){
#ifndef SSAO_OPT_DATA
#ifdef USE_MSAA
#ifdef GBUFFER_OPTIMIZATION
gbuffer_data gbd=gbuffer_load_data_offset(tc,tap,pos2d,iSample);
#else
gbuffer_data gbd=gbuffer_load_data(tap,iSample);
#endif
#else
#ifdef GBUFFER_OPTIMIZATION
gbuffer_data gbd=gbuffer_load_data_offset(tc,tap,pos2d);
#else
gbuffer_data gbd=gbuffer_load_data(tap);
#endif
#endif
float3 tap_pos=gbd.P;
#else
float z=s_half_depth.SampleLevel(smp_nofilter,uv,0);
return uv_to_eye(uv,z);
#endif
}
float falloff(float r){
return 1.0f-r*r;
}
float2 snap_uv_offset(float2 uv){
return round(uv*g_Resolution)*g_InvResolution;
}
float2 snap_uv_coord(float2 uv){
return uv-(frac(uv*g_Resolution)-0.5f)*g_InvResolution;
}
float tan_to_sin(float x){
return x/sqrt(1.0f+x*x);
}
float3 tangent_vector(float2 deltaUV,float3 dPdu,float3 dPdv){
return deltaUV.x*dPdu+deltaUV.y*dPdv;
}
float3 tangent_eye_pos(float2 uv,float4 tangentPlane){
float3 V=fetch_eye_pos(uv);
float NdotV=dot(tangentPlane.xyz,V);
if (NdotV<0.0)V*=(tangentPlane.w/NdotV);
return V;
}
float biased_tangent(float3 T){
float phi=atan(tangent(T))+g_AngleBias;
return tan(min(phi,M_PI*0.5));
}
void integrate_direction(inout float ao,float3 P,float2 uv,float2 deltaUV,
float numSteps,float tanH,float sinH)
{
for (float j=1;j<=numSteps;++j){
uv+=deltaUV;
float3 S=fetch_eye_pos(uv);
float d2=length2(S-P);
if (d2<g_sqr_R){
float tanS=tangent(P,S);
[branch]
if(tanS>tanH){
float sinS=tanS/sqrt(1.0f+tanS*tanS);
float r=sqrt(d2)*g_inv_R;
ao+=falloff(r)*(sinS-sinH);
tanH=tanS;
sinH=sinS;
}
}
}
}
float horizon_occlusion_integrateDirection(float2 deltaUV,
float2 uv0,
float3 P,
float numSteps,
float randstep)
{
float2 uv=uv0+snap_uv_offset(randstep*deltaUV);
deltaUV=snap_uv_offset(deltaUV);
float tanT=tan(-M_PI*0.5+g_AngleBias+1.e-5);
float sinT=tan_to_sin(tanT);
float ao=0;
integrate_direction(ao,P,uv,deltaUV,numSteps,tanT,sinT);
deltaUV=-deltaUV;
uv=uv0+snap_uv_offset(randstep*deltaUV);
integrate_direction(ao,P,uv,deltaUV,numSteps,tanT,sinT);return max(ao*0.5-1.0,0.0);
}
float horizon_occlusion2(float2 deltaUV,
float2 uv0,
float3 P,
float numSteps,
float randstep,
float3 dPdu,
float3 dPdv)
{
float2 uv=uv0+snap_uv_offset(randstep*deltaUV);
deltaUV=snap_uv_offset(deltaUV);
float3 T=deltaUV.x*dPdu+deltaUV.y*dPdv;
float tanH=biased_tangent(T);
float sinH=tanH/sqrt(1.0f+tanH*tanH);
float ao=0;
for(float j=1;j<=numSteps;++j){
uv+=deltaUV;
float3 S=fetch_eye_pos(uv);
float d2=length2(S-P);
if (d2<g_sqr_R){
float tanS=tangent(P,S);
[branch]
if(tanS>tanH){
float sinS=tanS/sqrt(1.0f+tanS*tanS);
float r=sqrt(d2)*g_inv_R;
ao+=falloff(r)*(sinS-sinH);
tanH=tanS;
sinH=sinS;
}
} 
}
return ao;
}
float4 calc_hbao(float z,float3 N,float2 tc0,float4 pos2d){
float3 P=uv_to_eye(tc0,z);
float2 step_size=float2(.5f/1024.0f,.5f/768.0f)*ssao_kernel_size/max(z,1.3);
float numSteps=min(g_NumSteps,min(step_size.x*g_Resolution.x,step_size.y*g_Resolution.y));
float numDirs=min(g_NumDir,min(step_size.x/4*g_Resolution.x,step_size.y/4*g_Resolution.y));
if(numSteps<1.0)return 1.0;
step_size=step_size/(numSteps+1);
float4 tangentPlane=float4(N,dot(P,N));
float3 Pr=tangent_eye_pos(tc0+float2(g_InvResolution.x,0),tangentPlane);
float3 Pl=tangent_eye_pos(tc0+float2(-g_InvResolution.x,0),tangentPlane);
float3 Pt=tangent_eye_pos(tc0+float2(0,g_InvResolution.y),tangentPlane);
float3 Pb=tangent_eye_pos(tc0+float2(0,-g_InvResolution.y),tangentPlane);
float3 dPdu=min_diff(P,Pr,Pl);
float3 dPdv=min_diff(P,Pt,Pb)*(g_Resolution.y*g_InvResolution.x);
#ifndef HBAO_WORLD_JITTER
float3 rand_Dir=jitter4.Load(int3((int)pos2d.x&63,(int)pos2d.y&63,0)).xyz;
#else
float3 tc1=mul(m_v2w,float4(P,1));
tc1*=ssao_noise_tile_factor;
tc1.xz+=tc1.y;
float3 rand_Dir=jitter4.SampleLevel(smp_jitter,tc1.xz,0).xyz;
#endif
float ao=0;
float alpha=2.0f*M_PI/g_NumDir;
float delta=g_NumDir/numDirs;
for (float d=0;d<g_NumDir;d+=delta){ 
float angle=alpha*d;
float2 dir=float2(cos(angle),sin(angle));
float2 deltaUV=float2(dir.x*rand_Dir.x-dir.y*rand_Dir.y,
dir.x*rand_Dir.y+dir.y*rand_Dir.x)
*step_size.xy;
ao+=horizon_occlusion2(deltaUV,tc0,P,numSteps,rand_Dir.z,dPdu,dPdv);
}
float WeaponAttenuation=smoothstep(0.8,0.9,length(P.xyz));
return 1.0-ao/g_NumDir*(g_Contrast*WeaponAttenuation);
}
#endif
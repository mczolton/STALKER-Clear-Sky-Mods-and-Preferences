#include "common.h"
#include "lmodel.h"
uniform float3 direction;
#ifdef MSAA_OPTIMIZATION
#ifdef GBUFFER_OPTIMIZATION
float4 main(float4 tc:TEXCOORD0,float4 pos2d:SV_Position,uint iSample:SV_SAMPLEINDEX):SV_Target
#else
float4 main(float4 tc:TEXCOORD0,uint iSample:SV_SAMPLEINDEX):SV_Target
#endif
#else
#ifdef GBUFFER_OPTIMIZATION
float4 main(float4 tc:TEXCOORD0,float4 pos2d:SV_Position):SV_Target
#else
float4 main(float4 tc:TEXCOORD0):SV_Target
#endif
#endif
{
float2 tcProj=tc.xy/tc.w;
gbuffer_data gbd=gbuffer_load_data(GLD_P(tcProj,pos2d,ISAMPLE));
float4 _P=float4(gbd.P,gbd.mtl);
float4 _N=float4(gbd.N,gbd.hemi);
float3 L2P=_P.xyz-Ldynamic_pos.xyz;
float3 L2P_N=normalize(L2P);
float rsqr=dot(L2P,L2P);
float att=saturate(1-rsqr*Ldynamic_pos.w);
float light=saturate(dot(-L2P_N,_N.xyz));
float hemi=saturate(dot(L2P_N,direction));
return blendp(float4(Ldynamic_color.xyz*att*light*hemi,0),tc);
}
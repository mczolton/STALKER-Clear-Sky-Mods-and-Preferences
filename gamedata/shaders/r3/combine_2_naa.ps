#include "common.h"
#include "mblur.h"
#include "dof.h"
#ifndef USE_MSAA
Texture2D s_distort;
#define EPSDEPTH 0.001
#else
Texture2DMS<float4,MSAA_SAMPLES>s_distort;
#define EPSDEPTH 0.001
#endif
uniform float4 e_barrier;
uniform float4 e_weights;
uniform float4 e_kernel;
float4 main(v2p_aa_AA I):SV_Target
{
float4 res=float4(0,0,0,0);
int iSample=0;
#ifdef GBUFFER_OPTIMIZATION
gbuffer_data gbd=gbuffer_load_data(I.Tex0,I.HPos,iSample);
#else
gbuffer_data gbd=gbuffer_load_data(I.Tex0,iSample);
#endif
#ifdef USE_DISTORT
float depth=gbd.P.z;
#ifndef USE_MSAA
float4 distort=s_distort.Sample(smp_nofilter,I.Tex0);
#else
float4 distort=s_distort.Load(int3(I.Tex0*pos_decompression_params2.xy,0),iSample);
#endif
float2 offset=(distort.xy-(127.0h/255.0h))*def_distort;
float2 center=I.Tex0+offset;
#ifdef GBUFFER_OPTIMIZATION
gbuffer_data gbdx=gbuffer_load_data_offset(I.Tex0,center,I.HPos,iSample);
#else
gbuffer_data gbdx=gbuffer_load_data_offset(I.Tex0,center,iSample);
#endif
float depth_x=gbdx.P.z;
if ((depth_x+EPSDEPTH)<depth)center=I.Tex0;
#else
float2 center=I.Tex0;
#endif
float3 img=dof(center);
float4 bloom=s_bloom.Sample(smp_rtlinear,center);
img=mblur(center,(gbd).P,img.rgb);
#ifdef USE_DISTORT
float3 blurred=bloom*def_hdr;
img=lerp (img,blurred,distort.z);
#endif
#ifdef CONTRAST_FILTER
float3 highcontrast=img.xyz*img.xyz;
img.xyz=lerp(img.xyz,highcontrast,CONTRAST_FILTER_COEF);
#endif
res+=combine_bloom(img,bloom);
return res;
}
#include "common.h"
#include "lmodel.h"
#include "hmodel.h"
uniform Texture2D s_half_depth;
#include "ssao.ps"
#ifdef HDAO
#define USE_HDAO_CODE
#include "ssao_hdao.ps"
#endif
#ifdef USE_HBAO
#include "ssao_hbao.ps"
#endif
struct _input {
float4 tc0:TEXCOORD0;
float2 tcJ:TEXCOORD1;
float4 pos2d:SV_Position;
};
struct _out {
float4 low:SV_Target0;
float4 high:SV_Target1;
};
#ifndef MSAA_OPTIMIZATION
_out main(_input I)
#else
_out main(_input I,uint iSample:SV_SAMPLEINDEX)
#endif
{
gbuffer_data gbd=gbuffer_load_data(GLD_P(I.tc0,I.pos2d,ISAMPLE));
float4 P=float4(gbd.P,gbd.mtl);
float4 N=float4(gbd.N,gbd.hemi);
float4 D=float4(gbd.C,gbd.gloss);
#ifndef USE_MSAA
float4 L=s_accumulator.Sample(smp_nofilter,I.tc0);
#else
#ifdef GBUFFER_OPTIMIZATION
float4 L=s_accumulator.Load(int3(I.pos2d.xy,0),ISAMPLE);
#else
float4 L=s_accumulator.Load(int3(I.tc0*pos_decompression_params2.xy,0),ISAMPLE);
#endif
#endif
#ifdef USE_SUPER_SPECULAR
{
float ds=dot(D.rgb,1.h/3.h);
D.w=max(D.w,ds*ds/8.h);
}
#endif
#ifdef FORCE_GLOSS
D.w=FORCE_GLOSS;
#endif
#ifdef USE_GAMMA_22
D.rgb=(D.rgb*D.rgb);
#endif
float mtl=P.w;
#ifdef USE_R2_STATIC_SUN
float sun_occ=P.w*2;
mtl=xmaterial;
L+=Ldynamic_color*sun_occ*plight_infinity(mtl,P.xyz,N.xyz,Ldynamic_dir);
#endif
float3 hdiffuse,hspecular;
#ifdef USE_MSAA
#ifdef GBUFFER_OPTIMIZATION
int2 texCoord=I.pos2d;
#else
int2 texCoord=int2(I.tc0*pos_decompression_params2.xy);
#endif
#endif
#ifdef USE_HBAO
float occ=calc_hbao(P.z,N,I.tc0,I.pos2d);
#else
#ifdef HDAO
float occ=calc_hdao(CS_P(P,N,I.tc0,I.tcJ,I.pos2d,ISAMPLE));
#else
float occ=calc_ssao(CS_P(P,N,I.tc0,I.tcJ,I.pos2d,ISAMPLE));
#endif
#endif
hmodel (hdiffuse,hspecular,mtl,N.w,D.w,P.xyz,N.xyz);
hdiffuse*=occ;
hspecular*=occ;
float4 light=float4(L.rgb+hdiffuse,L.w);
float4 C=D*light;
float3 spec=C.www+hspecular;
#ifdef USE_SUPER_SPECULAR
spec=(C.rgb*.5h+.5h)*C.w+hspecular;
#endif
float3 color=C.rgb+spec;
#ifdef DBG_TEST_NMAP
color=hdiffuse+L.rgb+N;
#endif
#ifdef DBG_TEST_NMAP_SPEC
color=hdiffuse+L.rgb+N+spec;
#endif
#ifdef DBG_TEST_LIGHT
color=hdiffuse+L.rgb;
#endif
#ifdef DBG_TEST_LIGHT_SPEC
color=hdiffuse+L.rgb+spec;
#endif
#ifdef DBG_TEST_SPEC
color=spec;
#endif
float3 pos=P.xyz;
float distance=length(pos);
float fog=saturate (distance*fog_params.w+fog_params.x);
color=lerp(color,fog_color,fog);
float skyblend=saturate(fog*fog);
#ifdef DBG_TMAPPING
color=D.xyz;
#endif
float tm_scale=I.tc0.w;
#ifdef SATURATION_FILTER
float gray=dot(color.xyz,float3(0.3,0.59,0.11));
color.xyz=lerp(float3(gray,gray,gray),color.xyz,COLOR_SATURATION+(dot(Ldynamic_color.xyz,float3(1,1,1))/3)*COLOR_SAT_SUN_COEF);
float3 maxc=float3(1,0.62,0);
#endif
#ifdef USE_SUPER_SPECULAR
color=spec-hspecular;
#endif 
_out o;
tonemap(o.low,o.high,color,tm_scale);
o.low.a=skyblend;
o.high.a=skyblend;
return o;
}

#include "common.h"
#include "shadow.h"
#ifndef ISAMPLE
#define ISAMPLE 0
#endif
struct v2p {
float3 lightToPos:TEXCOORD0;
float3 vPos:TEXCOORD1;
float fDensity:TEXCOORD2;
};
uniform float4 m_lmap [2];
Texture2D s_noise;
#define USE_LMAP
#define USE_LMAPXFORM
#define USE_SHADOW
#ifndef MSAA_OPTIMIZATION
float4 main(v2p I):SV_Target
#else
float4 main(v2p I,uint iSample:SV_SAMPLEINDEX):SV_Target
#endif
{
float4 P4=float4(I.vPos,1);
float4 PS=mul(m_shadow,P4);
float s=1.h;
#ifdef USE_SHADOW
s=shadow(PS);
#endif
float4 lightmap=1.h;
#ifdef USE_LMAP
#ifdef USE_LMAPXFORM
PS.x=dot(P4,m_lmap[0]);
PS.y=dot(P4,m_lmap[1]);
#endif
lightmap=s_lmap.Sample(smp_rtlinear,PS.xy/PS.w);
#endif
float rsqr=dot(I.lightToPos,I.lightToPos);
float att=saturate(1-rsqr*Ldynamic_pos.w);
PS.xy/=PS.w;
float time=timers.z*0.1;
PS.xy/=3;
PS.x+=time;
float4 t_noise=s_noise.Sample(smp_linear,PS);
PS.x-=time;
PS.y-=time*0.70091;
t_noise*=s_noise.Sample(smp_linear,PS);
t_noise=t_noise*0.5+0.5;
float maxIntens=I.fDensity;
float3 result=maxIntens*s*att;
result*=lightmap;
result*=Ldynamic_color*t_noise;
return float4(result,0);
}
local combat_sectors = {}

function register_combat_restrictor(restrictor)
	local restr_name = restrictor:name()
	if combat_sectors[restr_name] == nil then
		combat_sectors[restr_name] = restrictor
	end
end
--[[
function apply_combat_restrictor(npc)
	local npc_position = npc:position()
	for k, v in pairs (combat_sectors) do
		if v:inside(npc_position) then
			npc:add_restrictions(k, "")
		end
	end
end

function clear_combat_restrictor(npc)
	local out_restr = utils.parse_names(npc:out_restrictions())
	for k, v in pairs (out_restr) do
		if combat_sectors[v] ~= nil then
			npc:remove_restrictions(v, "")
		end
	end
end
]]
function accessible_job(se_obj, way_name)

	local obj = db.storage[se_obj.id]
	if obj == nil then
		return false
	end

	obj = obj.object
	if obj == nil then
		return false
	end

	local npc_position = obj:position()
	local job_position = patrol(way_name):point(0)
	local is_npc_inside = false

	for restr_name, restr in pairs (combat_sectors) do
		if restr:inside(npc_position) then
			is_npc_inside = true
			if restr:inside(job_position) then
				return true
			end
		end
	end

	return is_npc_inside == false
end

function get_job_restrictor(way_name)
	local job_position = patrol(way_name):point(0)
	for restr_name, restr in pairs (combat_sectors) do
		if restr:inside(job_position) then
			return ","..restr_name
		end
	end
	return ""
end
----------------------------------------------------------------------------------------------------
-- Walkers
----------------------------------------------------------------------------------------------------

class "evaluator_need_walker" (property_evaluator)

function evaluator_need_walker:__init(storage) super()
	self.st = storage
end

function evaluator_need_walker:evaluate()
	return xr_logic.is_active(self.object, self.st)
end

----------------------------------------------------------------------------------------------------

class "action_walker_activity" (action_base)

function action_walker_activity:__init (npc, storage) super()
	self.st = storage
	self.move_mgr = db.storage[npc:id()].move_mgr
end

function action_walker_activity:initialize()
	action_base.initialize(self)
	local npc = self.object
	npc:set_desired_position()
	npc:set_desired_direction()
	self:reset_scheme(npc)
end

function action_walker_activity:activate_scheme(loading, npc)
	self.st.signals = {}
	self:reset_scheme(npc)
end

function action_walker_activity:reset_scheme(npc)
	local st = self.st
	if st.path_walk_info == nil then
		st.path_walk_info = utils.path_parse_waypoints(st.path_walk)
	end
	if st.path_look_info == nil then
		st.path_look_info = utils.path_parse_waypoints(st.path_look)
	end
	self.move_mgr:reset(st.path_walk, st.path_walk_info, st.path_look, st.path_look_info, st.team, st.suggested_state)
end

function action_walker_activity:execute()
	action_base.execute(self)
	self.move_mgr:update()
	local st = self.st
	if st.sound_idle ~= nil then
		xr_sound.set_sound_play(self.object:id(), st.sound_idle)
	end
end

function action_walker_activity:finalize()
	self.move_mgr:finalize()
	action_base.finalize(self)
end

function action_walker_activity:position_riched()
	return self.move_mgr:arrived_to_first_waypoint()
end

----------------------------------------------------------------------------------------------------
-- Walker binder
----------------------------------------------------------------------------------------------------

local op_action_walker                         = xr_actions_id.zmey_walker_base + 1
local prop_need_walker                         = xr_evaluators_id.zmey_walker_base + 1

local xr_actions_id_alife                      = xr_actions_id.alife

local wp_prop_need_walker_true                 = world_property(prop_need_walker, true)
local wp_prop_need_walker_false                = world_property(prop_need_walker, false)

local wp_stalker_ids_property_alive_true       = world_property(stalker_ids.property_alive, true)
local wp_stalker_ids_property_danger_false     = world_property(stalker_ids.property_danger, false)
local wp_stalker_ids_property_enemy_false      = world_property(stalker_ids.property_enemy, false)
local wp_stalker_ids_property_anomaly_false    = world_property(stalker_ids.property_anomaly, false)
local wp_stalker_ids_smartcover_action_3_false = world_property(xr_evaluators_id.smartcover_action + 3, false)

function add_to_binder(npc, ini, scheme, section, storage)

	local manager                        = npc:motivation_action_manager()
	manager:add_evaluator                (prop_need_walker, this.evaluator_need_walker(storage))

	local new_action                     = this.action_walker_activity(npc, storage)
	new_action:add_precondition          (wp_stalker_ids_property_alive_true)
	new_action:add_precondition          (wp_stalker_ids_property_danger_false)
	new_action:add_precondition          (wp_stalker_ids_property_enemy_false)
	new_action:add_precondition          (wp_stalker_ids_property_anomaly_false)
	new_action:add_precondition          (wp_prop_need_walker_true)
	new_action:add_precondition          (wp_stalker_ids_smartcover_action_3_false)

	xr_motivator.addCommonPrecondition   (new_action)
	new_action:add_effect                (wp_prop_need_walker_false)
	manager:add_action                   (op_action_walker, new_action)

	xr_logic.subscribe_action_for_events (npc, storage, new_action)

	new_action = manager:action          (xr_actions_id_alife)
	new_action:add_precondition          (wp_prop_need_walker_false)
end

function set_scheme(npc, ini, scheme, section, gulag_name)

	local st                 = xr_logic.assign_storage_and_bind(npc, ini, scheme, section)
	st.logic                 = xr_logic.cfg_get_switch_conditions(ini, section, npc)
	local cfg_get_string     = utils.cfg_get_string
	local path_walk          = cfg_get_string(ini, section, "path_walk", npc, true, gulag_name)
	st.path_walk             = path_walk

	if not level.patrol_path_exists(path_walk) then
		abort("[xr_walker.set_scheme]: There is no patrol path '%s'.", path_walk)
	end

	st.path_look             = cfg_get_string(ini, section, "path_look", npc, false, gulag_name)
	st.team                  = cfg_get_string(ini, section, "team", npc, false, gulag_name)
	st.sound_idle            = cfg_get_string(ini, section, "sound_idle", npc, false, "")

	local suggested_state    = {}
	st.suggested_state       = suggested_state
	suggested_state.standing = cfg_get_string(ini, section, "def_state_standing", npc, false, "")

	suggested_state.moving   = cfg_get_string(ini, section, "def_state_moving1", npc, false, "")
	suggested_state.moving   = cfg_get_string(ini, section, "def_state_moving", npc, false, "", suggested_state.moving)

	st.path_walk_info        = nil
	st.path_look_info        = nil
end
local base                                  = xr_evaluators_id.combat_camper_base
local prop_enable                           = base + 0
local prop_see                              = base + 1

base                                        = xr_actions_id.combat_camper_base
local act_shoot                             = base + 0
local act_look_around                       = base + 1

local stalker_ids_property_enemy            = stalker_ids.property_enemy

local wp_stalker_ids_property_alive_true    = world_property(stalker_ids.property_alive, true)
local wp_stalker_ids_property_enemy_true    = world_property(stalker_ids_property_enemy, true)
local wp_stalker_ids_property_enemy_false   = world_property(stalker_ids_property_enemy, false)
local wp_stalker_ids_property_anomaly_false = world_property(stalker_ids.property_anomaly, false)

local wp_evaluators_id_script_combat_true   = world_property(xr_evaluators_id.script_combat, true)

local wp_prop_enable_true                   = world_property(prop_enable, true)
local wp_prop_see_true                      = world_property(prop_see, true)
local wp_prop_see_false                     = world_property(prop_see, false)

local math_random = math.random

--------------------------------------------------------------------------------------------------------------

class "evaluator_combat_camper" (property_evaluator)

function evaluator_combat_camper:__init(storage) super ()
	self.st = storage
end

function evaluator_combat_camper:evaluate()
	return db.storage[self.object:id()].script_combat_type == "camper"
end

--------------------------------------------------------------------------------------------------------------

class "evaluator_see" (property_evaluator)

function evaluator_see:__init(storage) super ()
	self.st = storage
end

function evaluator_see:evaluate()
	local sobj = self.object
	local be = sobj:best_enemy()
	if sobj:alive() and be and sobj:see(be) then
		self.st.last_seen_pos = be:position()
		return true
	else
		return false
	end
end

--------------------------------------------------------------------------------------------------------------

class "action_shoot" (action_base)

function action_shoot:__init(storage) super ()
	self.st = storage
end

function action_shoot:initialize()
	action_base.initialize(self)
	local sobj = self.object
	state_mgr.set_state(sobj, "hide_fire", nil, nil, {look_object = sobj:best_enemy()})
	self.st.camper_combat_action = true
end

function action_shoot:execute()
	action_base.execute(self)
end

function action_shoot:finalize()
	action_base.finalize(self)
	self.st.camper_combat_action = false
end

--------------------------------------------------------------------------------------------------------------

class "action_look_around" (action_base)

function action_look_around:__init(storage) super ()
	self.st = storage
end

function action_look_around:initialize()
	action_base.initialize(self)
	self.st.camper_combat_action = true
	self:reset()
end

function action_look_around:reset()

	local DTG = device():time_global()

	self.forget_time     = DTG + 5000 -- 30000
	self.change_dir_time = DTG + 1000 -- 15000

	local last_seen_pos = self.st.last_seen_pos
	local sobj = self.object

	if not last_seen_pos then
		local be = sobj:best_enemy()
		last_seen_pos = be and be:position()
		self.st.last_seen_pos = last_seen_pos
	end

	state_mgr.set_state(sobj, "hide", nil, nil, {look_position = last_seen_pos})
end

function action_look_around:execute()

	action_base.execute(self)

	local DTG = device():time_global()

	if self.forget_time < DTG then
		local sobj = self.object
		local be = sobj:best_enemy()
		if be then
			sobj:enable_memory_object(be, false)
		else
			dbglog("[xr_combat_camper.execute]: ERROR! NPC "..sobj:name().." has no best_enemy!")
			dbgmsg("[xr_combat_camper.execute]: ERROR! NPC "..sobj:name().." has no best_enemy!")
		end
		self.st.last_seen_pos = nil
		return
	end

	if self.change_dir_time < DTG then
		self.change_dir_time = DTG + math_random(500, 2000)
		local sobj = self.object
		local sobj_pos = sobj:position()
		if self.st.last_seen_pos == nil then
			self.st.last_seen_pos = vector():set(0,1,0)
			dbglog("[xr_combat_camper.execute]: ERROR! NPC "..sobj:name().." had no last_seen_pos!")
			dbgmsg("[xr_combat_camper.execute]: ERROR! NPC "..sobj:name().." had no last_seen_pos!")
		end
		local dir = vector():set(self.st.last_seen_pos):sub(sobj_pos)
		local ang = math_random(0, 120) - 60
		dir = vector_rotate_y(dir, ang)
		state_mgr.set_state(sobj, "hide", nil, nil, {look_position = sobj_pos:add(dir)})
	end
end

function action_look_around:finalize()
	action_base.finalize(self)
	self.st.last_seen_pos = nil
	self.st.camper_combat_action = false
end

function action_look_around:hit_callback(obj, amount, local_direction, hitter, bone_index)

	if hitter == nil or not self.st.camper_combat_action then
		return
	end

	local sobj = self.object
	local be = sobj and sobj:best_enemy()

	if be and hitter:id() == be:id() then
		self.st.last_seen_pos = be:position()
		self:reset()
	end
end

--------------------------------------------------------------------------------------------------------------

function add_to_binder(npc, ini, st, planner)

	planner:add_evaluator(prop_enable, evaluator_combat_camper(st))
	planner:add_evaluator(prop_see, evaluator_see(st))

	local action = action_shoot(st)
	action:add_precondition(wp_stalker_ids_property_alive_true)
	action:add_precondition(wp_stalker_ids_property_enemy_true)
	action:add_precondition(wp_stalker_ids_property_anomaly_false)
	action:add_precondition(wp_evaluators_id_script_combat_true)
	action:add_precondition(wp_prop_enable_true)
	action:add_precondition(wp_prop_see_true)
	action:add_effect(wp_stalker_ids_property_enemy_false)
	planner:add_action(act_shoot, action)

	action = action_look_around(st)
	action:add_precondition(wp_stalker_ids_property_anomaly_false)
	action:add_precondition(wp_prop_see_false)
	action:add_effect(wp_prop_see_true)
	planner:add_action(act_look_around, action)

	xr_logic.subscribe_action_for_events(npc, st, action)
	st.camper_combat_action = false
end
-- DC150425: Optimized this.
-- DC170503: Even more.

local math_random       = math.random
local math_ceil         = math.ceil

local item_by_community = {}
local count_by_level    = {}
local inited            = false

function init_box()
	local death_ini = ini_file("misc\\ph_box_generic.ltx")
	if not death_ini:section_exist("box_types") then
		abort("[xr_box.init_box]: There is no section [box_types] in misc\\ph_box_generic.ltx or any of its includes.")
		return
	end
	local n = death_ini:line_count("box_types")
	for i = 0, n - 1 do
		local found, box_type = death_ini:r_line("box_types", i, "", "")
		if not death_ini:section_exist(box_type) then
			abort("[xr_box.init_box]: There is no section [%s] in misc\\ph_box_generic.ltx or any of its includes, despite being listed under section [box_types].", box_type)
			return
		end
		local prob_by_item = {}
--		dbglog("item_by_community['%s'] = {}", box_type)
		item_by_community[box_type] = prob_by_item
		n = death_ini:line_count(box_type)
		for i = 0, n - 1 do
			local found, item_name, prob = death_ini:r_line(box_type, i, "", "")
--			dbglog("item_by_community['%s']['%s'] = %.1f", box_type, item_name, 100 * tonumber(prob))
			prob_by_item[item_name] = 100 * tonumber(prob)
		end
	end
	local level_name = level.name()
	if not death_ini:section_exist(level_name) then
		level_name = "default"
	end
	local mul_by_level = {}
	n = death_ini:line_count(level_name)
	for i = 0, n - 1 do
		local found, item_name, multi = death_ini:r_line(level_name, i, "", "")
--		dbglog("mul_by_level['%s'] = %s", item_name, multi)
		mul_by_level[item_name] = tonumber(multi)
	end
	local item_count_section = "item_count_"..level.get_game_difficulty()
	if not death_ini:section_exist(item_count_section) then
		abort("[xr_box.init_box]: There is no section [%s] in misc\\ph_box_generic.ltx or any of its includes.", item_count_section)
		return
	end
	local parse_nums = parse_nums
	n = death_ini:line_count(item_count_section)
	for i = 0, n - 1 do
		local found, item_name, count = death_ini:r_line(item_count_section, i, "", "")
		local t = parse_nums(count)
		local min = t[1]
		if min == nil then
			abort("[xr_box.init_box]: Missing value for parameter '%s' in section '%s' in misc\\ph_box_generic.ltx or one of its includes.", item_name, item_count_section)
			return
		end
		local max = t[2]
		if max == nil then
			max = min
		end
		local multiplier = mul_by_level[item_name]
		if multiplier == nil then
			multiplier = 0
--			mul_by_level[item_name] = 0 -- unnecessary
		end
--		dbglog("count_by_level['%s'] = {min = %d, max = %d}", item_name, min * multiplier, max * multiplier)
		count_by_level[item_name] = {min = min * multiplier, max = max * multiplier}
	end
end

class "ph_item_box"

function ph_item_box:__init(box)
	self.obj = box
	if not inited then
		init_box()
		inited = true
	end
end

function ph_item_box:spawn_items()

	local box = self.obj
	local ini = box:spawn_ini()

	if ini:line_exist("drop_box", "items") then
		local fields = {}
		local c = 0
		for name_or_num in string.gfind(ini:r_string("drop_box", "items"), "([%w_%-.]+)") do -- "([%w_%-.\\]+)%p*" -- examples: "items = medkit,2,bandage,5", "items = medkit_army, antirad"
			c = c + 1
			fields[c] = name_or_num
		end
		local items = {}
		local k = 1
		c = 0
		while #fields >= k do
			local item_data = {}
			item_data.section = fields[k]
			local next_field_num = tonumber(fields[k + 1])
			if next_field_num ~= nil then
				item_data.count = next_field_num
				k = k + 2
			else
				item_data.count = 1
				k = k + 1
			end
			c = c + 1
			items[c] = item_data
		end
		local sim = _G.sim
		local box_pos = box:position()
		local box_lvid = box:level_vertex_id()
		local box_gvid = box:game_vertex_id()
		for k, item_data in pairs (items) do
			local section = item_data.section
			for i = 1, item_data.count do
				sim:create(section, box_pos, box_lvid, box_gvid)
			end
		end
		return
	end

--	local box_type = utils.cfg_get_string(ini, "drop_box", "community", box, false, "", "def_box")
	local box_type = "def_box"
	if ini:line_exist("drop_box", "community") then
		box_type = ini:r_string("drop_box", "community")
	end

	local spawn_items = item_by_community[box_type]
	if spawn_items == nil then
		spawn_items = item_by_community["def_box"]
	end

	local sim = _G.sim
	local ini = system_ini()
	local box_pos = box:position()
	local box_lvid = box:level_vertex_id()
	local box_gvid = box:game_vertex_id()
	local ammo_sections = ammo_section

	for item_name, spawn_prob in pairs (spawn_items) do
		local units = math_ceil(math_random(count_by_level[item_name].min, count_by_level[item_name].max)) -- units to spawn (counted in boxes, if ammo)
		if units > 0 then
			if ammo_sections[item_name] == true then
				if math_random(100) <= spawn_prob then
--					se_respawn.create_ammo(item_name, box_pos, box_lvid, box_gvid, 65535, units)
					local num_in_box = ini:r_u32(item_name, "box_size")
					while units > num_in_box do
						sim:create_ammo(item_name, box_pos, box_lvid, box_gvid, 65535, num_in_box)
						units = units - num_in_box
					end
					sim:create_ammo(item_name, box_pos, box_lvid, box_gvid, 65535, units)
				end
			else
				for i = 1, units do
					if math_random(100) <= spawn_prob then
						sim:create(item_name, box_pos, box_lvid, box_gvid)
					end
				end
			end
		end
	end
end